<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }} - {{ mapObject.title }}</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
    <link rel="icon" type="image/jpg" href="/favicon.ico">
    <script defer data-domain="instam.app" src="https://analytics.juanma.app/js/script.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        .key-message {
            position: absolute;
            bottom: 50px;
            right: 10px;
            display: flex;
            flex-direction: column;
            gap: 5px;
            z-index: 1000;
            background: var(--bg);
            padding: 10px;
            border-radius: 5px;
        }

        .key-message-code {
            background-color: black;
            color: white;
            padding: 10px;
            border-radius: 5px;
        }

        .center-marker {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            color: red;
            font-weight: bold;
            font-size: 24px;
            pointer-events: none;
        }

        .map-info {
            position: absolute;
            bottom: 10px;
            left: 10px;
            z-index: 1000;
            background-color: var(--bg);
            padding: 25px;
            border-radius: 5px;
            max-width: 25%;
            display: none;
        }
    </style>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.socket.io/4.7.4/socket.io.min.js"></script>
</head>
<body style="display: flex; flex-direction: column; height: 100vh;">
    <div id="map" style="width: 100%; height: 100vh;"></div>
    <div class="map-info" style="display: none;">
        <h1 style="margin: 0;font-size: 1.5rem;" id="map-title"></h1>
        <p id="map-description" style="display: none; margin: 10px 0 0;"></p>
        <div id="created-by" style="display: none; justify-content: flex-end;margin-top: 30px;">
            <small>Made with <a href="{{baseUrl}}">{{title}}</a></small>
        </div>
    </div>
    <div class="center-marker">×</div>
    <div class="key-message">
        <form id="configForm" method="post" action="/api/maps/{{ map }}">
            <label for="email">Email <span style="color: red;">*</span></label>
            <input type="text" name="email" placeholder="Email">
            <h6 style="margin: 0;">The API key will be sent to this email</h6>
            <label for="title">Title <span style="color: red;">*</span></label>
            <input type="text" name="title" placeholder="Title">
            <br>
            <label for="description">Description</label>
            <textarea name="description" placeholder="Description"></textarea>
            <br>
            <label for="latitude">Center <span style="color: red;">*</span></label>
            <input type="text" name="latitude" placeholder="Latitude">
            <input type="text" name="longitude" placeholder="Longitude">
            <br>
            <label for="zoom">Zoom <span style="color: red;">*</span></label>
            <input type="number" name="zoom" placeholder="Zoom">
            <br>
            <button type="submit" class="button">Create map</button>
        </form>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var map = L.map('map', {
                center: [0, 0],
                zoom: 1,
            });

            // TODO: delete id
            const id = window.location.pathname.split('/').pop();

            function connectSocket() {
                socket = io();

                socket.on('marker:created', function({ marker }) {
                    if (marker.map_id !== id) return;

                    L.marker([parseFloat(marker.latitude), parseFloat(marker.longitude)], {
                        id: marker._id.toString()
                    })
                    .bindPopup(marker.title || marker._id)
                    .on('click', function(e) {
                        this.openPopup(); // Muestra el popup al clicar
                        navigator.clipboard.writeText(marker._id.toString());
                    })
                    .addTo(map)
                    .openPopup(); // Abre el popup por defecto

                    markers.push(marker);
                });

                socket.on('marker:deleted', function({ marker }) {
                    if (marker.map_id !== id) return;

                    map.eachLayer(function(layer) {
                        if (layer instanceof L.Marker && layer.options.id === marker._id.toString()) {
                            map.removeLayer(layer);
                        }
                    });
                });

                socket.on('map:updated', function({ map: currentMap }) {
                    if (currentMap.id !== id) return;

                    map.setView([currentMap.latitude, currentMap.longitude], currentMap.zoom);
                    document.getElementById('map-title').textContent = currentMap.title;
                    document.getElementById('map-description').textContent = currentMap.description;
                    document.getElementById('map-description').style.display = currentMap.description ? 'block' : 'none';
                });

                socket.on('connect_error', (error) => {
                    console.error('Error de conexión:', error);
                });
            }

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19
            }).addTo(map);

            let markers = [];
            let socket;

            const userMap = JSON.parse('{{{ map }}}');
            document.getElementById('configForm').setAttribute('action', `/${id}`);

            map.setView([userMap.latitude, userMap.longitude], userMap.zoom);

            if (userMap.title) {
                document.querySelector('.map-info').style.display = 'block';
                document.getElementById('map-title').textContent = userMap.title;
                document.getElementById('map-description').textContent = userMap.description;
                document.getElementById('map-description').style.display = userMap.description ? 'block' : 'none';
            }

            if (!userMap.new) {
                document.querySelector('.center-marker').style.display = 'none';
                document.querySelector('.key-message').style.display = 'none';
                if (userMap.title !== 'Demo') {
                    document.getElementById('created-by').style.display = 'flex';
                }
            }

            if (!userMap.email) {
                const smallScreen = window.innerWidth < 768;
                if (smallScreen) {
                    window.location.href = '/';
                }
                const lat = document.querySelector('[name="latitude"]').value || '0';
                const lng = document.querySelector('[name="longitude"]').value || '0';
            }

            userMap.markers.forEach(marker => {
                L.marker([parseFloat(marker.latitude), parseFloat(marker.longitude)])
                    .bindPopup(marker.title || marker._id)
                    .on('click', function(e) {
                        this.openPopup(); // Muestra el popup al clicar
                        navigator.clipboard.writeText(marker._id.toString());
                    })
                .addTo(map);
            });

            connectSocket();

            document.querySelector('[name="zoom"]').addEventListener('change', (e) => {
                const newZoom = parseInt(e.target.value);
                if (!isNaN(newZoom)) {
                    const limitedZoom = Math.min(Math.max(newZoom, 0), 19);
                    e.target.value = limitedZoom;
                    map.setZoom(limitedZoom);
                }
            });

            map.on('zoom', function() {
                document.querySelector('[name="zoom"]').value = parseInt(map.getZoom().toFixed(0));
            });

            map.on('moveend', function() {
                const center = map.getCenter();
                document.querySelector('[name="latitude"]').value = center.lat.toFixed(6);
                document.querySelector('[name="longitude"]').value = center.lng.toFixed(6);
            });

            document.querySelector('[name="title"]').addEventListener('input', (e) => {
                document.querySelector('.map-info').style.display = e.target.value ? 'block' : 'none';
                document.getElementById('map-title').textContent = e.target.value;
                document.getElementById('map-description').textContent = document.querySelector('[name="description"]').value;
            });

            document.querySelector('[name="description"]').addEventListener('input', (e) => {
                document.querySelector('.map-info').style.display = e.target.value ? 'block' : 'none';
                document.getElementById('map-description').style.display = e.target.value ? 'block' : 'none';
                document.getElementById('map-description').textContent = e.target.value;
            });

            const urlParams = new URLSearchParams(window.location.search);
            const message = urlParams.get('message');
            if (message) {
                const toast = document.createElement('div');
                toast.className = 'toast';
                toast.textContent = message;
                toast.style.backgroundColor = '#a04848';
                toast.style.color = 'var(--text)';
                toast.style.padding = '10px';
                toast.style.borderRadius = '5px';
                toast.style.position = 'absolute';
                toast.style.bottom = '10px';
                toast.style.right = '10px';
                toast.style.zIndex = '1000';
                toast.style.width = '50%';
                document.querySelector('.key-message').appendChild(toast);
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
        });
    </script>
</body>
</html>
