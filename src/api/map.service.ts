import { Injectable, Logger, ConflictException, NotFoundException, UnauthorizedException } from '@nestjs/common'; // Added ConflictException, NotFoundException, UnauthorizedException
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Map, MapDocument } from 'src/schemas/map.schema';
import { Marker, MarkerDocument } from 'src/schemas/marker.schema';
import { Cron, CronExpression } from '@nestjs/schedule';

@Injectable()
export class MapService {
  private readonly logger = new Logger(MapService.name);

  constructor(
    @InjectModel(Map.name) private mapModel: Model<MapDocument>,
    @InjectModel(Marker.name) private markerModel: Model<MarkerDocument>,
  ) {}

  async createMap(mapData: Partial<Map>): Promise<MapDocument> {
    if (!mapData.id) {
      // Consider BadRequestException if ID is syntactically invalid or missing when required by API contract
      throw new ConflictException('Map ID is required for creation.');
    }
    const existingMap = await this.mapModel.findOne({ id: mapData.id }).exec();
    if (existingMap) {
      throw new ConflictException(`Map with ID '${mapData.id}' already exists.`);
    }
    // api_key is generated by schema's pre-save hook
    const newMap = new this.mapModel(mapData);
    await newMap.save(); // Ensure pre-save hook for api_key runs
    this.logger.log(`Map ${newMap.id} created successfully.`);
    return newMap;
  }

  async updateMap(id: string, mapUpdateData: Partial<Map>, apiKey: string): Promise<MapDocument> {
    const map = await this.mapModel.findOne({ id }).exec();

    if (!map || map.id === 'demo') { // demo map cannot be updated via this method.
      throw new NotFoundException('Map not found or cannot be updated.');
    }

    if (apiKey !== map.api_key) {
      throw new UnauthorizedException('Invalid API key');
    }

    // Update fields
    Object.assign(map, mapUpdateData);
    await map.save();
    this.logger.log(`Map ${id} updated successfully.`);
    return map;
  }

  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT) // Added Cron decorator
  async deleteOldMapsWithoutMarkers(): Promise<void> {
    this.logger.log('Starting daily cron job: deleteOldMapsWithoutMarkers.'); // Updated log message

    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

    // Find maps older than one month, excluding the 'demo' map
    const oldMaps = await this.mapModel.find({
      createdAt: { $lt: oneMonthAgo },
      id: { $ne: 'demo' }, // Exclude the 'demo' map
    }).exec();

    if (oldMaps.length === 0) {
      this.logger.log('Cron job: No maps older than one month found.'); // Updated log message
      return;
    }

    this.logger.log(`Cron job: Found ${oldMaps.length} maps older than one month. Checking for markers...`); // Updated log message

    for (const map of oldMaps) {
      const markerCount = await this.markerModel.countDocuments({ map_id: map.id }).exec();
      if (markerCount === 0) {
        this.logger.log(`Cron job: Map ${map.id} (created at ${map.createdAt}) has no markers. Deleting...`); // Updated log message
        try {
          await this.mapModel.deleteOne({ _id: map._id }).exec();
          this.logger.log(`Cron job: Map ${map.id} deleted successfully.`); // Updated log message
        } catch (error) {
          this.logger.error(`Cron job: Error deleting map ${map.id}: ${error.message}`, error.stack); // Updated log message
        }
      } else {
        this.logger.log(`Cron job: Map ${map.id} (created at ${map.createdAt}) has ${markerCount} markers. Skipping deletion.`); // Updated log message
      }
    }
    this.logger.log('Cron job: Finished process to delete old maps without markers.'); // Updated log message
  }

  // ---- Test Helper Method ----
  async seedTestDataForDeletionLogic(options: {
    createOldMapWithNoMarkers?: boolean;
    createOldMapWithMarkers?: boolean;
    createRecentMapWithNoMarkers?: boolean;
    createRecentMapWithMarkers?: boolean;
  }): Promise<string[]> {
    this.logger.warn('Executing TEST HELPER: seedTestDataForDeletionLogic. THIS SHOULD NOT BE USED IN PRODUCTION.');
    const createdMapIds: string[] = [];
    const now = new Date();

    const twoMonthsAgo = new Date(now);
    twoMonthsAgo.setMonth(now.getMonth() - 2);

    const twoDaysAgo = new Date(now);
    twoDaysAgo.setDate(now.getDate() - 2);

    if (options.createOldMapWithNoMarkers) {
      const mapId = 'test-old-no-markers';
      await this.mapModel.deleteOne({ id: mapId }).exec(); // Clean up previous run
      const oldMapNoMarkers = new this.mapModel({
        id: mapId,
        title: 'Old Map - No Markers',
        email: 'test@example.com',
        createdAt: twoMonthsAgo, // Manually set createdAt for testing
        updatedAt: twoMonthsAgo,
      });
      await oldMapNoMarkers.save();
      // Ensure api_key is set if not done by save without isNew context
      if (!oldMapNoMarkers.api_key) {
        oldMapNoMarkers.api_key = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        await oldMapNoMarkers.save();
      }
      createdMapIds.push(oldMapNoMarkers.id);
      this.logger.log(`TEST HELPER: Created old map ${oldMapNoMarkers.id} with no markers.`);
    }

    if (options.createOldMapWithMarkers) {
      const mapId = 'test-old-with-markers';
      await this.mapModel.deleteOne({ id: mapId }).exec(); // Clean up previous run
      await this.markerModel.deleteMany({ map_id: mapId }).exec(); // Clean up markers
      const oldMapWithMarkers = new this.mapModel({
        id: mapId,
        title: 'Old Map - With Markers',
        email: 'test@example.com',
        createdAt: twoMonthsAgo,
        updatedAt: twoMonthsAgo,
      });
      await oldMapWithMarkers.save();
      if (!oldMapWithMarkers.api_key) {
        oldMapWithMarkers.api_key = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        await oldMapWithMarkers.save();
      }
      await this.markerModel.create({
        map_id: oldMapWithMarkers.id,
        latitude: '0',
        longitude: '0',
        title: 'Test Marker',
      });
      createdMapIds.push(oldMapWithMarkers.id);
      this.logger.log(`TEST HELPER: Created old map ${oldMapWithMarkers.id} with a marker.`);
    }

    if (options.createRecentMapWithNoMarkers) {
      const mapId = 'test-recent-no-markers';
      await this.mapModel.deleteOne({ id: mapId }).exec(); // Clean up previous run
      const recentMapNoMarkers = new this.mapModel({
        id: mapId,
        title: 'Recent Map - No Markers',
        email: 'test@example.com',
        createdAt: twoDaysAgo,
        updatedAt: twoDaysAgo,
      });
      await recentMapNoMarkers.save();
      if (!recentMapNoMarkers.api_key) {
        recentMapNoMarkers.api_key = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        await recentMapNoMarkers.save();
      }
      createdMapIds.push(recentMapNoMarkers.id);
      this.logger.log(`TEST HELPER: Created recent map ${recentMapNoMarkers.id} with no markers.`);
    }

    if (options.createRecentMapWithMarkers) {
      const mapId = 'test-recent-with-markers';
      await this.mapModel.deleteOne({ id: mapId }).exec(); // Clean up previous run
      await this.markerModel.deleteMany({ map_id: mapId }).exec(); // Clean up markers
      const recentMapWithMarkers = new this.mapModel({
        id: mapId,
        title: 'Recent Map - With Markers',
        email: 'test@example.com',
        createdAt: twoDaysAgo,
        updatedAt: twoDaysAgo,
      });
      await recentMapWithMarkers.save();
      if (!recentMapWithMarkers.api_key) {
        recentMapWithMarkers.api_key = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        await recentMapWithMarkers.save();
      }
      await this.markerModel.create({
        map_id: recentMapWithMarkers.id,
        latitude: '0',
        longitude: '0',
        title: 'Test Marker',
      });
      createdMapIds.push(recentMapWithMarkers.id);
      this.logger.log(`TEST HELPER: Created recent map ${recentMapWithMarkers.id} with a marker.`);
    }

    // Ensure 'demo' map exists and is old, for testing exclusion
    const demoMap = await this.mapModel.findOne({ id: 'demo' });
    if (demoMap) {
        demoMap.createdAt = twoMonthsAgo; // Make it old
        await demoMap.save();
        this.logger.log(`TEST HELPER: Ensured 'demo' map is old.`);
    }


    return createdMapIds;
  }
}
